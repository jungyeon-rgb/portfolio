# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI/CD github Actions & Docker

on:
  push:
    branches: [ "feat/comment" ]
  pull_request:
    branches: [ "feat/comment" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
      # JDK setting - github actions에서 사용할 JDK 설정 (aws 과 project의 java 버전과 별도로 관리)
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## gradle caching (빌드 시간 줄이기)
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 폴더 확인
#      - name: List directory contents
#        run: ls -R

      # 환경별 yml 파일 생성(1) - dev
      - name: make application.yml
        if: contains(github.ref, 'feat/comment')
        run: |
          cd ./back/portfolio/src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.YML }}" > ./application-prod.yml
        shell: bash

            # gradle chmod
      - name: Grant execute permission for gradlew
        run: |
          cd ./back/portfolio
          chmod +x gradlew

      # gradle build
      - name: Build with Gradle
        run: ./gradlew clean build -x test

        # docker login
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # docker build & push to production
      - name: Docker build & push to prod
        if: contains(github.ref, 'feat/comment')
        run: |
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/jyproject .
          docker push ${{ secrets.DOCKER_REPO }}/jyproject

      ## deploy to production
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        id: deploy-prod
        if: contains(github.ref, 'feat/comment')
        with:
          host: ${{ secrets.HOST_PROD }} # EC2 퍼블릭 IPv4 DNS
          username: ubuntu
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker ps
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/jyproject
            sudo docker-compose up -d
            sudo docker image prune -f
      ## ## sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_REPO }}/agaproject